     1                                  ; wersja NASM na system 64-bitowy (x86-64)
     2                                  ; kompilacja: nasm -felf64 1.4.asm -o 1.4.o
     3                                  ; linkowanie: ld 1.4.o -o 1.4
     4                                  ; linkowanie: ld -m elf_x86_64  hello.o -o hello
     5                                  
     6                                  section .text            ; początek sekcji kodu.
     7                                  
     8                                  global _start            ; linker ld domyślnie rozpoczyna
     9                                                           ; wykonywanie programu od etykiety _start
    10                                                           ; musi ona być widoczna na zewnątrz (global)
    11                                  _start:                   ; punkt startu programu
    12                                  
    13                                  
    14                                   ;read date time
    15 00000000 B8C9000000               mov rax, 201	;wczytanie czasu systemowego sys_time
    16 00000005 48BF-                    mov rdi, time	;do time ma byc przekazana kopia buforu
    16 00000007 [0900000000000000] 
    17 0000000F 0F05                     syscall
    18                                   ;Zwraca w EAX liczbę sekund która upłynęła od 1 stycznia 1970 roku (minus 1) 
    19                                   
    20                                   ;mov ebx, eax
    21                                   ;mov dword [time_len], eax ; przepisujemy dlugosc liczby sekund
    22                                  
    23                                  
    24                                  ;zerowanie EDX/RDX
    25                                  ;dzielenie przez 10 - reszta t ilosc sekund
    26 00000011 4831D2                   xor rdx,rdx
    27 00000014 BB0A000000               mov ebx, 10
    28 00000019 F7F3                     div ebx
    29 0000001B 83C230                   add edx, 48
    30                                   
    31 0000001E 67885107                 mov byte[ecx+7], dl;
    32                                   ;dec iterator
    33                                    
    34 00000022 4831D2                    xor rdx,rdx
    35 00000025 BB06000000               mov ebx, 6
    36 0000002A F7F3                     div ebx
    37 0000002C 83C230                   add edx, 48
    38                                   
    39 0000002F 67885106                 mov byte[ecx+6], dl;
    40                                   ;dec iterator
    41                                   ;mov byte[ecx+iterator], ';';
    42                                   ;dec iterator
    43                                   
    44                                   
    45 00000033 880C25[00000000]         mov [output],cl
    46                                  
    47                                   ; print message
    48                                   ;call print_int	;wypisze 
    49 0000003A B801000000               mov rax, 1          ; numer funkcji systemowej: 1=sys_write - zapisz do pliku
    50 0000003F BF01000000               mov rdi, 1          ; numer pliku, do którego piszemy. 1 = standardowe wyjście = ekran
    51 00000044 4889CE                   mov rsi, rcx      ; RSI = adres tekstu
    52 00000047 BA14000000               mov rdx, 20    ; RDX = długość tekstu
    53 0000004C 0F05                     syscall                 ; wywołujemy funkcję systemową
    54                                   
    55                                   
    56                                  
    57                                  
    58                                   ; exit with code 0
    59 0000004E 4889C7                   mov rdi, rax
    60 00000051 B83C000000               mov rax, 60         ; numer funkcji systemowej (60=sys_exit - wyjdź z programu)
    61                                   ;mov rdi, 0          ; RDI - kod wyjścia
    62 00000056 0F05                     syscall                 ; wywołujemy funkcję systemową
    63                                   
    64                                   ;mov     rdi, rax         ; return least sig byte of time as return code
    65                                   ;mov     rax, 60          ; system call 0x3C(60) is exit
    66                                    ;      syscall
    67                                  
    68                                  
    69                                  section .data                   ; początek sekcji danych.
    70                                  
    71 00000000 58583A58583A58580A       output db "XX:XX:XX", 0ah
    72                                   output_len equ $ - output
    73                                   				
    74 00000009 0000000000000000         time:   dq      0
    75 00000011 00000000                 time_len dd 0  ; długość napisu
    76                                   
    77 00000015 07                       iterator db 7
    78 00000016 00<rept>                 inp1 times 255 db 0
    79                                   inp1_len equ $ - inp1    
    80                                  
    81                                   
    82                                   
    83                                   
    84                                   
    85                                  
    86                                  
